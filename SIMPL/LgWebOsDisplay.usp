#SYMBOL_NAME "LG WebOS Display"

#INCLUDEPATH "D:\\Programming\\OneDrive - Global USS\\Crestron Modules\\Mat\\SIMPLSharp Projects\\LgWebOs\\LgWebOs\\LgWebOs\\bin\\Debug"
#USER_SIMPLSHARP_LIBRARY "LgWebOs"

#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

Digital_Input PowerOn, PowerOff, _skip_, VolumeUp, VolumeDown, VolumeMuteOn, VolumeMuteOff;
Digital_Input _skip_, KeyUp, KeyDown, KeyLeft, KeyRight, KeyHome, KeyBack, KeySelect, KeyExit, KeyInfo, KeyMenu, KeyRed, KeyGreen, KeyYellow, KeyBlue, KeyPlay, KeyPause, KeyStop;
Digital_Input _skip_, Key0, Key1, Key2, Key3, Key4, Key5, Key6, Key7, Key8, Key9;
Digital_Input _skip_, GetInputs, GetApps;
Analog_Input SetVolume, ChangeInput, LaunchApp;
String_Input _skip_, SendNotification[100];

Digital_Output PowerIsOn, PowerIsOff, IsBusy, MuteIsOn, MuteIsOff;
Analog_Output VolumeValue;
Analog_Output _skip_, _skip_, _skip_,  _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,_skip_, _skip_, _skip_,_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,  TotalInputs, TotalApps, _skip_, CurrentInput;
String_Output InputNamesXsig, InputIconsXsig, AppNamesXsig, AppIconsXsig;

Display webOsDisplay;

String_Parameter _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, ID[100], IpAddress[100], MacAddress[100];
Integer_Parameter Port, VolumeRepeatTime, DebugMode;

#BEGIN_PARAMETER_PROPERTIES VolumeRepeatTime
    propDefaultValue=10d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Port
    propDefaultValue=3000d;
#END_PARAMETER_PROPERTIES

integer newDirection;

function VolumeRepeat(integer direction)
{
	newDirection = direction;

    if(newDirection = 1)
    	webOsDisplay.IncrementVolume();
    else if(newDirection = 0)
        webOsDisplay.DecrementVolume();

    wait(VolumeRepeatTime, vRepeat)
    {
        VolumeRepeat(newDirection);
    }
}

Push PowerOn
{
    webOsDisplay.PowerOn();
}

Push PowerOff
{
    webOsDisplay.PowerOff();
}

Push VolumeUp
{
    VolumeRepeat(1);
}

Release VolumeUp
{
    CancelWait(vRepeat);
}

Push VolumeDown
{
    VolumeRepeat(0);
}

Release VolumeDown
{
    CancelWait(vRepeat);
}

Push VolumeMuteOn
{
    webOsDisplay.SetMute(1);
}

Push VolumeMuteOff
{
    webOsDisplay.SetMute(0);
}

Push KeyUp
{
    webOsDisplay.SendKey("UP");
}

Push KeyDown
{
    webOsDisplay.SendKey("DOWN");
}

Push KeyLeft
{
    webOsDisplay.SendKey("LEFT");
}

Push KeyRight
{
    webOsDisplay.SendKey("RIGHT");
}

Push KeyHome
{
    webOsDisplay.SendKey("HOME");
}

Push KeyBack
{
    webOsDisplay.SendKey("BACK");
}

Push KeySelect
{
    webOsDisplay.SendKey("ENTER");
}

Push KeyExit
{
    webOsDisplay.SendKey("EXIT");
}

Push KeyInfo
{
    webOsDisplay.SendKey("INFO");
}

Push KeyMenu
{
    webOsDisplay.SendKey("MENU");
}

Push KeyRed
{
    webOsDisplay.SendKey("RED");
}

Push KeyGreen
{
    webOsDisplay.SendKey("GREEN");
}

Push KeyYellow
{
    webOsDisplay.SendKey("YELLOW");
}

Push KeyBlue
{
    webOsDisplay.SendKey("BLUE");
}

Push KeyPlay
{
    webOsDisplay.SendKey("PLAY");
}

Push KeyPause
{
    webOsDisplay.SendKey("PAUSE");
}
Push KeyStop
{
    webOsDisplay.SendKey("STOP");
}

Push Key0
{
    webOsDisplay.SendKey("0");
}

Push Key1
{
    webOsDisplay.SendKey("1");
}

Push Key2
{
    webOsDisplay.SendKey("2");
}

Push Key3
{
    webOsDisplay.SendKey("3");
}

Push Key4
{
    webOsDisplay.SendKey("4");
}

Push Key5
{
    webOsDisplay.SendKey("5");
}

Push Key6
{
    webOsDisplay.SendKey("6");
}

Push Key7
{
    webOsDisplay.SendKey("7");
}

Push Key8
{
    webOsDisplay.SendKey("8");
}

Push Key9
{
    webOsDisplay.SendKey("9");
}

Push GetInputs
{
    webOsDisplay.GetInputs();
}

Push GetApps
{
    webOsDisplay.GetApps();

}

change SetVolume
{
    webOsDisplay.SetVolume(SetVolume);
}

Change ChangeInput
{
    webOsDisplay.ChangeInput(ChangeInput);
}

Change LaunchApp
{
    webOsDisplay.LaunchApp(LaunchApp);
}

Change SendNotification
{
    webOsDisplay.SendNotification(SendNotification);
}

callback function newBusy(integer state)
{
    IsBusy = state;
}

callback function newPowerState(integer state)
{
    if(state =1)
    {
        PowerIsOn = ON;
        PowerIsOff = OFF;
    }
    else
    {
        PowerIsOn = OFF;
        PowerIsOff = ON;
    }
}

callback function newVolumeValue(integer value)
{
    VolumeValue = value;
}

callback function newVOlumeMuteState(integer state)
{
    if(state = 1)
    {
        MuteIsOn = ON;
        MuteIsOff = OFF;
    }
    else
    {
        MuteIsOn = OFF;
        MuteIsOff = ON;
    }
}

callback function newCurrentInputValue(integer value)
{
    CurrentInput = value + 1;
}

callback function newInputCount(integer count)
{
    TotalInputs = count;
}

callback function newExternalInputNames(string xsig)
{
    InputNamesXsig = xsig;
}

callback function newExternalInputIcons(string xsig)
{
    InputIconsXsig = xsig;
}

callback function newAppCount(integer count)
{
    TotalApps = count;
}

callback function newAppNames(string xsig)
{
    AppNamesXsig = xsig;
}

callback function newAppIcons(string xsig)
{
    AppIconsXsig = xsig;
}

Function Main()
{
    WaitForInitializationComplete();

    webOsDisplay.DebugMode = DebugMode;

    RegisterDelegate(webOsDisplay, onBusy, newBusy);
    RegisterDelegate(webOsDisplay, onPowerState, newPowerState);
    RegisterDelegate(webOsDisplay, onVolumeValue, newVolumeValue);
    RegisterDelegate(webOsDisplay, onVolumeMuteState, newVolumeMuteState);
    RegisterDelegate(webOsDisplay, onCurrentInputValue, newCurrentInputValue);
    RegisterDelegate(webOsDisplay, onInputCount, newInputCount);
    RegisterDelegate(webOsDisplay, onExternalInputNames, newExternalInputNames);
    RegisterDelegate(webOsDisplay, onExternalInputIcons, newExternalInputIcons);
    RegisterDelegate(webOsDisplay, onAppCount, newAppCount);
    RegisterDelegate(webOsDisplay, onAppIcons, newAppIcons);
    RegisterDelegate(webOsDisplay, onAppNames, newAppNames);


    webOsDisplay.Initialize(ID, IpAddress, Port, MacAddress);
}